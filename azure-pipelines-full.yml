trigger:
- master

variables:
- name: MONO_VERSION
  value: 5_18_1
- name: XCODE_VERSION
  value: 10.2

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install fsharp
    displayName: 'Install F#'
  - script: ./build.sh Test
  - task: CopyFiles@1
    inputs:
      contents: ./build_output/*.nupkg
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: Linux
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/TestResults/**/*.trx'
      testRunTitle: '$(Agent.JobName)'

- job: macOS
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - bash: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MONO_VERSION)
    displayName: Switch to the latest Xamarin SDK
  - bash: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XCODE_VERSION).app;sudo xcode-select --switch /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer
    displayName: Switch to the latest Xcode
  - bash: |
          MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/$(MONO_VERSION)
          echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
          echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
          echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/Commands/bin:$PATH"
    displayName: Set Mono
  - script: ./build.sh Test
  - task: CopyFiles@1
    inputs:
      contents: ./build_output/*.nupkg
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: macOS
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/TestResults/**/*.trx'
      testRunTitle: '$(Agent.JobName)'

- job: Windows
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: choco install gtksharp

  # Run Build with Test target when not merging a release branch into master
  - script: .\build.cmd Test
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))) 

  # Run Build with Release target when merging a release branch into master
  - script: .\build.cmd Release
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))

  - task: CopyFiles@2
    inputs:
      contents: build_output\*.nupkg
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: Windows
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/TestResults/**/*.trx'
      testRunTitle: '$(Agent.JobName)'

