// Copyright 2018-2020 Fabulous contributors. See LICENSE.md for license.
namespace Fabulous.XamarinForms.TestNamespace

#nowarn "59" // cast always holds
#nowarn "66" // cast always holds
#nowarn "67" // cast always holds

open Fabulous
open Fabulous.XamarinForms

module ViewAttributes =
    let TotoAttribKey : AttributeKey<_> = AttributeKey<_>("Toto")

type ViewBuilders() =
    /// Builds the attributes for a TestButton in the view
    static member inline BuildTestButton(attribCount: int,
                                         ?toto: string,
                                         ?borderColor: Xamarin.Forms.Color,
                                         ?borderWidth: float,
                                         ?characterSpacing: float,
                                         ?command: unit -> unit,
                                         ?commandCanExecute: bool,
                                         ?contentLayout: Xamarin.Forms.Button.ButtonContentLayout,
                                         ?cornerRadius: int,
                                         ?fontAttributes: Xamarin.Forms.FontAttributes,
                                         ?fontFamily: string,
                                         ?fontSize: Fabulous.XamarinForms.InputTypes.FontSize,
                                         ?image: Fabulous.XamarinForms.InputTypes.Image,
                                         ?padding: Xamarin.Forms.Thickness,
                                         ?text: string,
                                         ?textColor: Xamarin.Forms.Color,
                                         ?gestureRecognizers: ViewElement list,
                                         ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                         ?margin: Xamarin.Forms.Thickness,
                                         ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                         ?anchorX: float,
                                         ?anchorY: float,
                                         ?backgroundColor: Xamarin.Forms.Color,
                                         ?behaviors: ViewElement list,
                                         ?flowDirection: Xamarin.Forms.FlowDirection,
                                         ?height: float,
                                         ?inputTransparent: bool,
                                         ?isEnabled: bool,
                                         ?isTabStop: bool,
                                         ?isVisible: bool,
                                         ?minimumHeight: float,
                                         ?minimumWidth: float,
                                         ?opacity: float,
                                         ?resources: (string * obj) list,
                                         ?rotation: float,
                                         ?rotationX: float,
                                         ?rotationY: float,
                                         ?scale: float,
                                         ?scaleX: float,
                                         ?scaleY: float,
                                         ?styles: Xamarin.Forms.Style list,
                                         ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                         ?tabIndex: int,
                                         ?translationX: float,
                                         ?translationY: float,
                                         ?visual: Xamarin.Forms.IVisual,
                                         ?width: float,
                                         ?style: Xamarin.Forms.Style,
                                         ?styleClasses: string list,
                                         ?shellBackButtonBehavior: ViewElement,
                                         ?shellBackgroundColor: Xamarin.Forms.Color,
                                         ?shellDisabledColor: Xamarin.Forms.Color,
                                         ?shellForegroundColor: Xamarin.Forms.Color,
                                         ?shellFlyoutBehavior: Xamarin.Forms.FlyoutBehavior,
                                         ?shellNavBarIsVisible: bool,
                                         ?shellSearchHandler: ViewElement,
                                         ?shellTabBarBackgroundColor: Xamarin.Forms.Color,
                                         ?shellTabBarDisabledColor: Xamarin.Forms.Color,
                                         ?shellTabBarForegroundColor: Xamarin.Forms.Color,
                                         ?shellTabBarIsVisible: bool,
                                         ?shellTabBarTitleColor: Xamarin.Forms.Color,
                                         ?shellTabBarUnselectedColor: Xamarin.Forms.Color,
                                         ?shellTitleColor: Xamarin.Forms.Color,
                                         ?shellTitleView: ViewElement,
                                         ?shellUnselectedColor: Xamarin.Forms.Color,
                                         ?shellNavBarHasShadow: bool,
                                         ?automationId: string,
                                         ?classId: string,
                                         ?effects: ViewElement list,
                                         ?menu: ViewElement,
                                         ?styleId: string,
                                         ?ref: ViewRef,
                                         ?tag: obj,
                                         ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                         ?created: obj -> unit) = 

        let attribCount = match toto with Some _ -> attribCount + 1 | None -> attribCount

        let attribBuilder = ViewBuilders.BuildButton(attribCount, ?borderColor=borderColor, ?borderWidth=borderWidth, ?characterSpacing=characterSpacing, ?command=command, ?commandCanExecute=commandCanExecute, 
                                                     ?contentLayout=contentLayout, ?cornerRadius=cornerRadius, ?fontAttributes=fontAttributes, ?fontFamily=fontFamily, ?fontSize=fontSize, 
                                                     ?image=image, ?padding=padding, ?text=text, ?textColor=textColor, ?gestureRecognizers=gestureRecognizers, 
                                                     ?horizontalOptions=horizontalOptions, ?margin=margin, ?verticalOptions=verticalOptions, ?anchorX=anchorX, ?anchorY=anchorY, 
                                                     ?backgroundColor=backgroundColor, ?behaviors=behaviors, ?flowDirection=flowDirection, ?height=height, ?inputTransparent=inputTransparent, 
                                                     ?isEnabled=isEnabled, ?isTabStop=isTabStop, ?isVisible=isVisible, ?minimumHeight=minimumHeight, ?minimumWidth=minimumWidth, 
                                                     ?opacity=opacity, ?resources=resources, ?rotation=rotation, ?rotationX=rotationX, ?rotationY=rotationY, 
                                                     ?scale=scale, ?scaleX=scaleX, ?scaleY=scaleY, ?styles=styles, ?styleSheets=styleSheets, 
                                                     ?tabIndex=tabIndex, ?translationX=translationX, ?translationY=translationY, ?visual=visual, ?width=width, 
                                                     ?style=style, ?styleClasses=styleClasses, ?shellBackButtonBehavior=shellBackButtonBehavior, ?shellBackgroundColor=shellBackgroundColor, ?shellDisabledColor=shellDisabledColor, 
                                                     ?shellForegroundColor=shellForegroundColor, ?shellFlyoutBehavior=shellFlyoutBehavior, ?shellNavBarIsVisible=shellNavBarIsVisible, ?shellSearchHandler=shellSearchHandler, ?shellTabBarBackgroundColor=shellTabBarBackgroundColor, 
                                                     ?shellTabBarDisabledColor=shellTabBarDisabledColor, ?shellTabBarForegroundColor=shellTabBarForegroundColor, ?shellTabBarIsVisible=shellTabBarIsVisible, ?shellTabBarTitleColor=shellTabBarTitleColor, ?shellTabBarUnselectedColor=shellTabBarUnselectedColor, 
                                                     ?shellTitleColor=shellTitleColor, ?shellTitleView=shellTitleView, ?shellUnselectedColor=shellUnselectedColor, ?shellNavBarHasShadow=shellNavBarHasShadow, ?automationId=automationId, 
                                                     ?classId=classId, ?effects=effects, ?menu=menu, ?styleId=styleId, ?ref=ref, 
                                                     ?tag=tag, ?focused=focused, ?unfocused=unfocused, ?created=created)
        match toto with None -> () | Some v -> attribBuilder.Add(ViewAttributes.TotoAttribKey, (v)) 
        attribBuilder

    static member CreateTestButton () : Fabulous.XamarinForms.TestButton =
        new Fabulous.XamarinForms.TestButton()

    static member UpdateTestButton (prevOpt: ViewElement voption, curr: ViewElement, target: Fabulous.XamarinForms.TestButton) = 
        let mutable prevTotoOpt = ValueNone
        let mutable currTotoOpt = ValueNone
        for kvp in curr.AttributesKeyed do
            if kvp.Key = ViewAttributes.TotoAttribKey.KeyValue then 
                currTotoOpt <- ValueSome (kvp.Value :?> string)
        match prevOpt with
        | ValueNone -> ()
        | ValueSome prev ->
            for kvp in prev.AttributesKeyed do
                if kvp.Key = ViewAttributes.TotoAttribKey.KeyValue then 
                    prevTotoOpt <- ValueSome (kvp.Value :?> string)
        // Update inherited members
        ViewBuilders.UpdateButton (prevOpt, curr, target)
        // Update properties
        match prevTotoOpt, currTotoOpt with
        | ValueSome prevValue, ValueSome currValue when prevValue = currValue -> ()
        | _, ValueSome currValue -> target.Toto <-  currValue
        | ValueSome _, ValueNone -> target.Toto <- null
        | ValueNone, ValueNone -> ()

    static member inline ConstructTestButton(?toto: string,
                                             ?borderColor: Xamarin.Forms.Color,
                                             ?borderWidth: float,
                                             ?characterSpacing: float,
                                             ?command: unit -> unit,
                                             ?commandCanExecute: bool,
                                             ?contentLayout: Xamarin.Forms.Button.ButtonContentLayout,
                                             ?cornerRadius: int,
                                             ?fontAttributes: Xamarin.Forms.FontAttributes,
                                             ?fontFamily: string,
                                             ?fontSize: Fabulous.XamarinForms.InputTypes.FontSize,
                                             ?image: Fabulous.XamarinForms.InputTypes.Image,
                                             ?padding: Xamarin.Forms.Thickness,
                                             ?text: string,
                                             ?textColor: Xamarin.Forms.Color,
                                             ?gestureRecognizers: ViewElement list,
                                             ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                             ?margin: Xamarin.Forms.Thickness,
                                             ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                             ?anchorX: float,
                                             ?anchorY: float,
                                             ?backgroundColor: Xamarin.Forms.Color,
                                             ?behaviors: ViewElement list,
                                             ?flowDirection: Xamarin.Forms.FlowDirection,
                                             ?height: float,
                                             ?inputTransparent: bool,
                                             ?isEnabled: bool,
                                             ?isTabStop: bool,
                                             ?isVisible: bool,
                                             ?minimumHeight: float,
                                             ?minimumWidth: float,
                                             ?opacity: float,
                                             ?resources: (string * obj) list,
                                             ?rotation: float,
                                             ?rotationX: float,
                                             ?rotationY: float,
                                             ?scale: float,
                                             ?scaleX: float,
                                             ?scaleY: float,
                                             ?styles: Xamarin.Forms.Style list,
                                             ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                             ?tabIndex: int,
                                             ?translationX: float,
                                             ?translationY: float,
                                             ?visual: Xamarin.Forms.IVisual,
                                             ?width: float,
                                             ?style: Xamarin.Forms.Style,
                                             ?styleClasses: string list,
                                             ?shellBackButtonBehavior: ViewElement,
                                             ?shellBackgroundColor: Xamarin.Forms.Color,
                                             ?shellDisabledColor: Xamarin.Forms.Color,
                                             ?shellForegroundColor: Xamarin.Forms.Color,
                                             ?shellFlyoutBehavior: Xamarin.Forms.FlyoutBehavior,
                                             ?shellNavBarIsVisible: bool,
                                             ?shellSearchHandler: ViewElement,
                                             ?shellTabBarBackgroundColor: Xamarin.Forms.Color,
                                             ?shellTabBarDisabledColor: Xamarin.Forms.Color,
                                             ?shellTabBarForegroundColor: Xamarin.Forms.Color,
                                             ?shellTabBarIsVisible: bool,
                                             ?shellTabBarTitleColor: Xamarin.Forms.Color,
                                             ?shellTabBarUnselectedColor: Xamarin.Forms.Color,
                                             ?shellTitleColor: Xamarin.Forms.Color,
                                             ?shellTitleView: ViewElement,
                                             ?shellUnselectedColor: Xamarin.Forms.Color,
                                             ?shellNavBarHasShadow: bool,
                                             ?automationId: string,
                                             ?classId: string,
                                             ?effects: ViewElement list,
                                             ?menu: ViewElement,
                                             ?styleId: string,
                                             ?ref: ViewRef<Fabulous.XamarinForms.TestButton>,
                                             ?tag: obj,
                                             ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                             ?created: (Fabulous.XamarinForms.TestButton -> unit)) = 

        let attribBuilder = ViewBuilders.BuildTestButton(0,
                               ?toto=toto,
                               ?borderColor=borderColor,
                               ?borderWidth=borderWidth,
                               ?characterSpacing=characterSpacing,
                               ?command=command,
                               ?commandCanExecute=commandCanExecute,
                               ?contentLayout=contentLayout,
                               ?cornerRadius=cornerRadius,
                               ?fontAttributes=fontAttributes,
                               ?fontFamily=fontFamily,
                               ?fontSize=fontSize,
                               ?image=image,
                               ?padding=padding,
                               ?text=text,
                               ?textColor=textColor,
                               ?gestureRecognizers=gestureRecognizers,
                               ?horizontalOptions=horizontalOptions,
                               ?margin=margin,
                               ?verticalOptions=verticalOptions,
                               ?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?backgroundColor=backgroundColor,
                               ?behaviors=behaviors,
                               ?flowDirection=flowDirection,
                               ?height=height,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isTabStop=isTabStop,
                               ?isVisible=isVisible,
                               ?minimumHeight=minimumHeight,
                               ?minimumWidth=minimumWidth,
                               ?opacity=opacity,
                               ?resources=resources,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?styles=styles,
                               ?styleSheets=styleSheets,
                               ?tabIndex=tabIndex,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?visual=visual,
                               ?width=width,
                               ?style=style,
                               ?styleClasses=styleClasses,
                               ?shellBackButtonBehavior=shellBackButtonBehavior,
                               ?shellBackgroundColor=shellBackgroundColor,
                               ?shellDisabledColor=shellDisabledColor,
                               ?shellForegroundColor=shellForegroundColor,
                               ?shellFlyoutBehavior=shellFlyoutBehavior,
                               ?shellNavBarIsVisible=shellNavBarIsVisible,
                               ?shellSearchHandler=shellSearchHandler,
                               ?shellTabBarBackgroundColor=shellTabBarBackgroundColor,
                               ?shellTabBarDisabledColor=shellTabBarDisabledColor,
                               ?shellTabBarForegroundColor=shellTabBarForegroundColor,
                               ?shellTabBarIsVisible=shellTabBarIsVisible,
                               ?shellTabBarTitleColor=shellTabBarTitleColor,
                               ?shellTabBarUnselectedColor=shellTabBarUnselectedColor,
                               ?shellTitleColor=shellTitleColor,
                               ?shellTitleView=shellTitleView,
                               ?shellUnselectedColor=shellUnselectedColor,
                               ?shellNavBarHasShadow=shellNavBarHasShadow,
                               ?automationId=automationId,
                               ?classId=classId,
                               ?effects=effects,
                               ?menu=menu,
                               ?styleId=styleId,
                               ?ref=(match ref with None -> None | Some (ref: ViewRef<Fabulous.XamarinForms.TestButton>) -> Some ref.Unbox),
                               ?tag=tag,
                               ?focused=focused,
                               ?unfocused=unfocused,
                               ?created=(match created with None -> None | Some createdFunc -> Some (fun (target: obj) ->  createdFunc (unbox<Fabulous.XamarinForms.TestButton> target))))

        ViewElement.Create<Fabulous.XamarinForms.TestButton>(ViewBuilders.CreateTestButton, (fun prevOpt curr target -> ViewBuilders.UpdateTestButton(prevOpt, curr, target)), attribBuilder)

/// Viewer that allows to read the properties of a ViewElement representing a TestButton
type TestButtonViewer(element: ViewElement) =
    inherit ButtonViewer(element)
    do if not ((typeof<Fabulous.XamarinForms.TestButton>).IsAssignableFrom(element.TargetType)) then failwithf "A ViewElement assignable to type 'Fabulous.XamarinForms.TestButton' is expected, but '%s' was provided." element.TargetType.FullName
    /// Get the value of the Toto member
    member this.Toto = element.GetAttributeKeyed(ViewAttributes.TotoAttribKey)

[<AbstractClass; Sealed>]
type View private () =
    /// Describes a TestButton in the view
    static member inline TestButton(?anchorX: float,
                                    ?anchorY: float,
                                    ?automationId: string,
                                    ?backgroundColor: Xamarin.Forms.Color,
                                    ?behaviors: ViewElement list,
                                    ?borderColor: Xamarin.Forms.Color,
                                    ?borderWidth: float,
                                    ?characterSpacing: float,
                                    ?classId: string,
                                    ?command: unit -> unit,
                                    ?commandCanExecute: bool,
                                    ?contentLayout: Xamarin.Forms.Button.ButtonContentLayout,
                                    ?cornerRadius: int,
                                    ?created: (Fabulous.XamarinForms.TestButton -> unit),
                                    ?effects: ViewElement list,
                                    ?flowDirection: Xamarin.Forms.FlowDirection,
                                    ?focused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?fontAttributes: Xamarin.Forms.FontAttributes,
                                    ?fontFamily: string,
                                    ?fontSize: Fabulous.XamarinForms.InputTypes.FontSize,
                                    ?gestureRecognizers: ViewElement list,
                                    ?height: float,
                                    ?horizontalOptions: Xamarin.Forms.LayoutOptions,
                                    ?image: Fabulous.XamarinForms.InputTypes.Image,
                                    ?inputTransparent: bool,
                                    ?isEnabled: bool,
                                    ?isTabStop: bool,
                                    ?isVisible: bool,
                                    ?margin: Xamarin.Forms.Thickness,
                                    ?menu: ViewElement,
                                    ?minimumHeight: float,
                                    ?minimumWidth: float,
                                    ?opacity: float,
                                    ?padding: Xamarin.Forms.Thickness,
                                    ?ref: ViewRef<Fabulous.XamarinForms.TestButton>,
                                    ?resources: (string * obj) list,
                                    ?rotation: float,
                                    ?rotationX: float,
                                    ?rotationY: float,
                                    ?scale: float,
                                    ?scaleX: float,
                                    ?scaleY: float,
                                    ?shellBackButtonBehavior: ViewElement,
                                    ?shellBackgroundColor: Xamarin.Forms.Color,
                                    ?shellDisabledColor: Xamarin.Forms.Color,
                                    ?shellFlyoutBehavior: Xamarin.Forms.FlyoutBehavior,
                                    ?shellForegroundColor: Xamarin.Forms.Color,
                                    ?shellNavBarHasShadow: bool,
                                    ?shellNavBarIsVisible: bool,
                                    ?shellSearchHandler: ViewElement,
                                    ?shellTabBarBackgroundColor: Xamarin.Forms.Color,
                                    ?shellTabBarDisabledColor: Xamarin.Forms.Color,
                                    ?shellTabBarForegroundColor: Xamarin.Forms.Color,
                                    ?shellTabBarIsVisible: bool,
                                    ?shellTabBarTitleColor: Xamarin.Forms.Color,
                                    ?shellTabBarUnselectedColor: Xamarin.Forms.Color,
                                    ?shellTitleColor: Xamarin.Forms.Color,
                                    ?shellTitleView: ViewElement,
                                    ?shellUnselectedColor: Xamarin.Forms.Color,
                                    ?style: Xamarin.Forms.Style,
                                    ?styleClasses: string list,
                                    ?styleId: string,
                                    ?styleSheets: Xamarin.Forms.StyleSheets.StyleSheet list,
                                    ?styles: Xamarin.Forms.Style list,
                                    ?tabIndex: int,
                                    ?tag: obj,
                                    ?text: string,
                                    ?textColor: Xamarin.Forms.Color,
                                    ?toto: string,
                                    ?translationX: float,
                                    ?translationY: float,
                                    ?unfocused: Xamarin.Forms.FocusEventArgs -> unit,
                                    ?verticalOptions: Xamarin.Forms.LayoutOptions,
                                    ?visual: Xamarin.Forms.IVisual,
                                    ?width: float) =

        ViewBuilders.ConstructTestButton(?anchorX=anchorX,
                               ?anchorY=anchorY,
                               ?automationId=automationId,
                               ?backgroundColor=backgroundColor,
                               ?behaviors=behaviors,
                               ?borderColor=borderColor,
                               ?borderWidth=borderWidth,
                               ?characterSpacing=characterSpacing,
                               ?classId=classId,
                               ?command=command,
                               ?commandCanExecute=commandCanExecute,
                               ?contentLayout=contentLayout,
                               ?cornerRadius=cornerRadius,
                               ?created=created,
                               ?effects=effects,
                               ?flowDirection=flowDirection,
                               ?focused=focused,
                               ?fontAttributes=fontAttributes,
                               ?fontFamily=fontFamily,
                               ?fontSize=fontSize,
                               ?gestureRecognizers=gestureRecognizers,
                               ?height=height,
                               ?horizontalOptions=horizontalOptions,
                               ?image=image,
                               ?inputTransparent=inputTransparent,
                               ?isEnabled=isEnabled,
                               ?isTabStop=isTabStop,
                               ?isVisible=isVisible,
                               ?margin=margin,
                               ?menu=menu,
                               ?minimumHeight=minimumHeight,
                               ?minimumWidth=minimumWidth,
                               ?opacity=opacity,
                               ?padding=padding,
                               ?ref=ref,
                               ?resources=resources,
                               ?rotation=rotation,
                               ?rotationX=rotationX,
                               ?rotationY=rotationY,
                               ?scale=scale,
                               ?scaleX=scaleX,
                               ?scaleY=scaleY,
                               ?shellBackButtonBehavior=shellBackButtonBehavior,
                               ?shellBackgroundColor=shellBackgroundColor,
                               ?shellDisabledColor=shellDisabledColor,
                               ?shellFlyoutBehavior=shellFlyoutBehavior,
                               ?shellForegroundColor=shellForegroundColor,
                               ?shellNavBarHasShadow=shellNavBarHasShadow,
                               ?shellNavBarIsVisible=shellNavBarIsVisible,
                               ?shellSearchHandler=shellSearchHandler,
                               ?shellTabBarBackgroundColor=shellTabBarBackgroundColor,
                               ?shellTabBarDisabledColor=shellTabBarDisabledColor,
                               ?shellTabBarForegroundColor=shellTabBarForegroundColor,
                               ?shellTabBarIsVisible=shellTabBarIsVisible,
                               ?shellTabBarTitleColor=shellTabBarTitleColor,
                               ?shellTabBarUnselectedColor=shellTabBarUnselectedColor,
                               ?shellTitleColor=shellTitleColor,
                               ?shellTitleView=shellTitleView,
                               ?shellUnselectedColor=shellUnselectedColor,
                               ?style=style,
                               ?styleClasses=styleClasses,
                               ?styleId=styleId,
                               ?styleSheets=styleSheets,
                               ?styles=styles,
                               ?tabIndex=tabIndex,
                               ?tag=tag,
                               ?text=text,
                               ?textColor=textColor,
                               ?toto=toto,
                               ?translationX=translationX,
                               ?translationY=translationY,
                               ?unfocused=unfocused,
                               ?verticalOptions=verticalOptions,
                               ?visual=visual,
                               ?width=width)


[<AutoOpen>]
module ViewElementExtensions = 

    type ViewElement with

        /// Adjusts the Toto property in the visual element
        member x.Toto(value: string) = x.WithAttribute(ViewAttributes.TotoAttribKey, (value))

        member inline x.With(?toto: string) =
            let x = match toto with None -> x | Some opt -> x.Toto(opt)
            x

    /// Adjusts the Toto property in the visual element
    let toto (value: string) (x: ViewElement) = x.Toto(value)
